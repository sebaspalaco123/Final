--Parcial Final ¡

CREATE TABLE PEDIDOS (
items integer,
cajas_grandes integer,
cajas_pequenas integer,
cantidad_cajas integer
)

/*Usted escribirá una función llamada CALCULAR_CAJAS_NECESARIAS que determine si un número de items pueden
ser despachados y el número de cajas necesarias para empacar los items. Hay 2 tamaños de cajas: grandesç
que pueden almacenar hasta 5 artículos y pequeñas que pueden almacenar solamente 1 item.

Un pedido no se puede despachar cuando se cumpla una de dos condiciones, que no alcancen
las cajas para almacenar los items o que una caja grande no tenga su aforo completo, es decir,
si tengo 4 items y solamente 1 caja grande, no podría despacharla porque la caja no está llena en su totalidad.

Usted deberá crear una función que reciba 3 parámetros en el siguiente orden: número de items, 
cantidad de cajas grandes disponibles y cantidad de cajas pequeñas disponibles.
La función retornará un número, si el pedido no se puede despachar, deberá retornar -1,
de lo contrario, deberá retornar el número de cajas grandes y pequeñas utilizadas para el despacho.*/





create or replace function CALCULAR_CAJAS_NECESARIA (numero_item in Integer, cantidad_grande in integer, cantidad_peque in integer)
return integer
as

--respuesta
respuesta integer;
--espacio para grandes
Total_caja_grande integer := cantidad_grande*5;

-- espacio caja pequeña es 1.

--cajas empleadas

caja_empleada integer := 0;

--cajas totales
Cajas_disponibles integer := Total_caja_grande+cantidad_pequeña;
begin 

  if numero_item > Cajas_disponibles then
    respuesta :=-1; 
  end if; 
    
   if (MOD(numero_item, 5) >= 1) then
   
   respuesta:=-1;
           
   end if;
  
   if(numero_item <= Cajas_disponibles)then
   
   caja_empleada :=88;
   
   end if;

    return respuesta;
    end; 
    
create or replace procedure PROCESAR_PEDIDOS(respuesta in integer ) is
EXEC DBMS_OUTPUT.PUT_LINE(final.CALCULAR_CAJAS_NECESARIA(9,2,1));
begin

if(respuesta=-1) then
 DBMS_OUTPUT.PUT_LINE('no fue posible');
end if;

end;


---ARREGLO 

/*

Write an efficient program to find the sum of contiguous subarray within a one-dimensional array
of numbers which has the largest sum. For this exercise you should create a function called LARGEST_SUM.
The param needed is an array of integers and you should return the sum (integer) with the conditions given.
Example:
For the array [-2,-3,4,-1,-2,1,5,-3] the largest subarray sum is [4,-1,-2,1,5] which has a sum of 7.
Pista: Implementar algoritmo de Kadane */


CREATE TYPE number_array AS VARRAY(50) OF INTEGER;


create or replace function LARGEST_SUM ()
return integer
as

DECLARE 
    i integer :=0;
    DATOS number_array;
    MAXIMO INTEGER :=number_array[0], i;
    curr_max integer :=number_array[0];
    int curr_max = a[0];
BEGIN 
     for i in 1..lengthi < size; i++)
   {
        curr_max = max(a[i], curr_max+a[i]);
        max_so_far = max(max_so_far, curr_max);
   }

END; 


